{"version":3,"sources":["components/Header/index.jsx","App.js","serviceWorker.js","index.js","img/meishi.png"],"names":["navLink","name","link","Header","react_default","a","createElement","className","src","meishiIcon","alt","href","map","v","i","key","target","rel","Component","App","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4QAIMA,EAAU,CACd,CACEC,KAAM,2BACNC,KAAM,0CAER,CACED,KAAM,iCACNC,KAAM,uCAER,CACED,KAAM,uCACNC,KAAM,qCAER,CACED,KAAM,eACNC,KAAM,wDAER,CACED,KAAM,SACNC,KAAM,6BAiCKC,mLA3BX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKE,IAAMC,IAAaC,IAAI,MACjCN,EAAAC,EAAAC,cAAA,KAAGK,KAAK,KAAR,6BAEFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXP,EAAQY,IAAI,SAACC,EAAEC,GACb,OACEV,EAAAC,EAAAC,cAAA,KACES,IAAKD,EACLH,KAAME,EAAEX,KACRc,OAAO,SACPC,IAAI,uBAEHJ,EAAEZ,iBAlBAiB,aCQNC,mLA7BX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,8CACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,8DAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,wGACmBF,EAAAC,EAAAC,cAAA,0CADnB,uBAC6CF,EAAAC,EAAAC,cAAA,uBAD7C,qBACsEF,EAAAC,EAAAC,cAAA,8BADtE,+DACmGF,EAAAC,EAAAC,cAAA,4BADnG,UADF,+EAIkBF,EAAAC,EAAAC,cAAA,gFAJlB,2HAImEF,EAAAC,EAAAC,cAAA,qGAJnE,2NAKEF,EAAAC,EAAAC,cAAA,2mBAIAF,EAAAC,EAAAC,cAAA,qCACOF,EAAAC,EAAAC,cAAA,KACHK,KAAK,sDACLK,OAAO,SACPC,IAAI,uBAHD,6BADP,cAlBQC,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.659eb55e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\nimport meishiIcon from \"../../img/meishi.png\";\n\nconst navLink = [\n  {\n    name: \"美食专栏\",\n    link: \"https://zhuanlan.zhihu.com/c_134626828\"\n  },\n  {\n    name: \"程序员专栏\",\n    link: \"https://zhuanlan.zhihu.com/fed-talk\"\n  },\n  {\n    name: \"尤克里里专栏\",\n    link: \"https://zhuanlan.zhihu.com/uulili\"\n  },\n  {\n    name: \"知乎\",\n    link: \"https://www.zhihu.com/people/wen-xiang-34/activities\"\n  },\n  {\n    name: \"Github\",\n    link: \"https://github.com/icepy\"\n  },\n];\n\nclass Header extends Component {\n  render(){\n    return (\n      <div className=\"header-container\">\n        <div className=\"header-title\">\n          <div><img src={ meishiIcon } alt=\"\" /></div>\n          <a href=\"/\">子曰五溪</a>\n        </div>\n        <div className=\"header-nav-link\">\n          {\n            navLink.map((v,i) => {\n              return (\n                <a \n                  key={i} \n                  href={v.link}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {v.name}\n                </a>\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-Header\">\n          <h1 className=\"App-My-Tag\">子曰五溪小营地</h1>\n          <div className=\"App-My-Des\">给你的生活加点阳光 :)</div>\n        </div>\n        <div className=\"App-Content\">\n          <p>\n            永远都会写代码的程序员，Hi，我是<strong>子曰五溪</strong>，网络ID<strong>icepy</strong>，花名<strong>象尘</strong>，联系我请添加微信：<strong>icepy_1988</strong>。\n          </p>\n          2010开始从事程序员的工作，前<strong>远光-携程-阿里巴巴员工</strong>，经历了从前端到大前端变革的整个过程，在<strong>工程化,Hybrid,Weex,Flutter,Node.js,混合架构领域</strong>等方面有着非常丰富的经验，于是成为了一个“核常兼备”很“完善”的工程师。\n          <p>\n            我非常热爱美食和户外骑行，拥有一辆春风NK250，喜欢自己折腾摩托车的维修和维护，如果你也热爱摩旅，不妨一起聊聊。\n            目前我在北京，从事着自己喜欢的工作，努力快乐的生活，最后我想感谢我的人生旅途中所遇到的每一个人。\n          </p>\n          <p>\n            我的微博 <a \n              href=\"https://weibo.com/2455876310/profile?topnav=1&wvr=6\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >@子曰五溪</a>;\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/meishi.01241491.png\";"],"sourceRoot":""}